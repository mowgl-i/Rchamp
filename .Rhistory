devtools::document()
usethis::use_vignette()
usethis::use_vignette(Rchamp)
usethis::use_vignette('Rchamp')
library(Rchamp)
devtools::document()
library(Rchamp)
Rchamp::simple_function()
library(Rchamp)
install.packages('Rchamp')
install.packages("Rchamp")
devtools::install_github('mowgl-i/Rchamp')
devtools::install_github('mowgl-i/Rchamp@main')
devtools::document()
devtools::install_github('mowgl-i/Rchamp@Development')
simple_function()
devtools::document()
getwd()
setwd("C:/Users/macia/Box/SuccessCoaching")
dir()
library(tidyverse)
library(tidyverse)
library(stringi)
v1_accepted = read_csv('dec2020_march12021_accept.csv')
v1_decline = read_csv('dec2020_march12021_decline.csv')
head(v1_accepted)
head(v1_decline)
v1_accepted %>% select(SCHOOL_OTHER_ID, LAST_NAME, FIRST_NAME, EMAIL_ADDRESS,PERM_PHONE, MOBILE_PHONE)
v1_accepted %>% select(SCHOOL_OTHER_ID, LAST_NAME, FIRST_NAME, EMAIL_ADDRESS,PERM_PHONE, MOBILE_PHONE) %>%  count
v1_accepted %>%  anti_join(v1_decline) %>%  count()
v1_accepted %>%  anti_join(v1_decline, by = 'SCHOOL_OTHER_ID') %>%  count()
v1_accepted %>% select(SCHOOL_OTHER_ID, LAST_NAME, FIRST_NAME, EMAIL_ADDRESS,PERM_PHONE, MOBILE_PHONE) %>%
anti_join(v1_decline, by = 'SCHOOL_OTHER_ID')
v1_email_list = v1_accepted %>% select(SCHOOL_OTHER_ID, LAST_NAME, FIRST_NAME, EMAIL_ADDRESS,PERM_PHONE, MOBILE_PHONE) %>%
anti_join(v1_decline, by = 'SCHOOL_OTHER_ID')
View(v1_email_list)
View(v1_decline)
write_csv(v1_email_list, 'v1_email_list.csv')
getwd()
library(tidyverse)
library(httr)
usethis::edit_r_environ()
devtools::document()
devtools::document()
twitch_auth()
library(httr)
twitch_auth()
twitch_auth()
devtools::document()
devtools::document()
query_list <- function(...){
a <- list(...)
as.list(
setNames(
unlist(a), rep(names(a), sapply(a, length))))
}
twitch_auth()
get_clip <- function(clip_id){
url <- 'https://api.twitch.tv/helix/clips'
o <- GET(url,
guewry = query_list(
id = clip_id
)) %>%  content()
if(!is.null(o$error) && o$error=="Unauthorized") stop(o$message)
if(length(o$data)<1) stop("No results for this query parameters.")
o$data %>% transpose() %>% simplify_all()
}
get_clip('GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ')
get_clip('GracefulIntelligentKathyMikeHogu')
get_clip('GracefulIntelligentKathyMikeHogu-')
o <- GET(url,
query = query_list(
id = clip_id
)) %>%  content()
get_clip <- function(clip_id){
url <- 'https://api.twitch.tv/helix/clips'
o <- GET(url,
query = query_list(
id = clip_id
)) %>%  content()
if(!is.null(o$error) && o$error=="Unauthorized") stop(o$message)
if(length(o$data)<1) stop("No results for this query parameters.")
o$data %>% transpose() %>% simplify_all()
}
devtools::document()
devtools::document()
get_clip('GracefulIntelligentKathyMikeHogu')
get_clip('GracefulIntelligentKathyMikeHogu-')
get_clip('GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
get_clip_chat <- function(clip_id){
url <- 'https://api.twitch.tv/v5/videos/{0}/comments?content_offset_seconds={1}'
o <- get(url,
query = query_list(
id = clip_id
)) %>% content()
if(!is.null(o$error) && o$error=="Unauthorized") stop(o$message)
if(length(o$data)<1) stop("No results for this query parameters.")
o$data %>% transpose() %>% simplify_all()
}
get_clip_chat()
get_clip_chat('GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ')
get_clip_chat <- function(){
url <- 'https://api.twitch.tv/v5/videos/GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ/comments?content_offset_seconds={1}' ## is {0} the id of the clip?
o <- get(url) %>% content()
if(!is.null(o$error) && o$error=="Unauthorized") stop(o$message)
if(length(o$data)<1) stop("No results for this query parameters.")
o$data %>% transpose() %>% simplify_all()
}
get_clip_chat()
devtools::document()
devtools::document()
devtools::document()
getwd()
setwd("C:/Users/macia/Documents/MSIA-19/Git/IAL-622")
shiny::runApp('Dashboard_1')
Titanic
as.data.frame(Titanic)
Titanic=as.data.frame(Titanic)
runApp('Dashboard_1')
runApp('Dashboard_1')
library(ggplot2)
ggplot(Titanic,aes(x = Frequency))+
geom_histogram(bins = input$bins)
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
View(Titanic)
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
View(Titanic)
View(Titanic)
Titanic_1=as.data.frame(Titanic)
library(tidyverse)
Titanic = read_csv('https://github.com/NotAyushXD/Titanic-dataset/blob/master/train.csv')
View(Titanic)
Titanic = read_csv('https://raw.githubusercontent.com/NotAyushXD/Titanic-dataset/master/train.csv')
View(Titanic)
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
runApp('Dashboard_1')
Titanic = read_csv('https://raw.githubusercontent.com/NotAyushXD/Titanic-dataset/master/train.csv')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Titanic Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
plotOutput("distPlot_titanic"),
radioButtons('class','Which class would you like to view?',c('1','2','3')),
plotOutput('Plot_by_class')
),
# Show a plot of the generated distribution
mainPanel(
dataTableOutput('dynamic_table')
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot_titanic <- renderPlot({
ggplot(Titanic,aes(x = Fare))+
geom_histogram(bins = input$bins)+
labs(title = 'Histogram of Fare')+
xlab('Freqency')    })
output$dynamic_table <- renderDataTable(Titanic, options = list(pageLength=5))
output$Plot_by_class <- renderPlot({
Titanic %>% filter(Pclass == input$class) %>%
ggplot(aes(x = Sex, y = Fare, color = Sex))+
geom_boxplot()
})
}
runApp('Dashboard_1')
install.packages('reactable')
library(reactable)
runApp('Dashboard_1')
runApp('Dashboard_1')
getwd()
getwd()
setwd("~/MSIA-19/Git/Rchamp")
get_clip('GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ')
get_clip <- function(clip_id){
url <- 'https://api.twitch.tv/helix/clips'
o <- GET(url,
query = query_list(
id = clip_id
)) %>%  content()
if(!is.null(o$error) && o$error=="Unauthorized") stop(o$message)
if(length(o$data)<1) stop("No results for this query parameters.")
o$data %>% transpose() %>% simplify_all()
}
get_clip('GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ')
library(tidyverse)
library(httr)
library(devtools)
library(roxygen2)
library(purrr)
library(magrittr)
get_clip('GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ')
#Creates the query list appropriately.
#' @importFrom stats setNames
query_list <- function(...){
a <- list(...)
as.list(
setNames(
unlist(a), rep(names(a), sapply(a, length))))
}
get_clip <- function(clip_id){
url <- 'https://api.twitch.tv/helix/clips'
o <- GET(url,
query = query_list(
id = clip_id
)) %>%  content()
if(!is.null(o$error) && o$error=="Unauthorized") stop(o$message)
if(length(o$data)<1) stop("No results for this query parameters.")
o$data %>% transpose() %>% simplify_all()
}
get_clip('GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ')
#' Authentication
#' @name Auth
#' @references https://github.com/Freguglia/rTwitchAPI/blob/master/R/authentication.R
#' @export
twitch_auth = function(){
client_id <- Sys.getenv("TWITCH_CLIENT_ID")
client_secret <- Sys.getenv("TWITCH_CLIENT_SECRET")
if (client_id == "" | client_secret == ""){
stop("Please add TWITCH_CLIENT_ID and TWITCH_CLIENT_SECRET to your environment variables (see documentation for reference).")
}
o <- httr::POST("https://id.twitch.tv/oauth2/token",
query = query_list(client_id=client_id,
client_secret = client_secret,
grant_type="client_credentials")) %>% content()
httr::set_config(httr::add_headers('Client-ID' = client_id, Authorization=paste0("Bearer ",o$access_token)))
}
twitch_auth()
get_clip('GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ')
test<-get_clip('GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ')
View(test)
test[["video_id"]]
a
client_id <- Sys.getenv("TWITCH_CLIENT_ID")
client_secret <- Sys.getenv("TWITCH_CLIENT_SECRET")
url <- 'https://api.twitch.tv/helix/clips/'
paste(url,'GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ',sep = "")
url <- 'https://api.twitch.tv/kraken/clips/'
paste(url,'GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ',sep = "")
get_clip <- function(clip_id){
client_id <- Sys.getenv("TWITCH_CLIENT_ID")
client_secret <- Sys.getenv("TWITCH_CLIENT_SECRET")
url <- 'https://api.twitch.tv/kraken/clips/'
o <- GET(paste(url,clip_id,sep = ""),config = add_headers('client-id'=client_id, 'Accept':'application/vnd.twitchtv.v5+json')) %>%  content()
if(!is.null(o$error) && o$error=="Unauthorized") stop(o$message)
if(length(o$data)<1) stop("No results for this query parameters.")
o$data %>% transpose() %>% simplify_all()
}
test<-get_clip('GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ')
get_clip <- function(clip_id){
client_id <- Sys.getenv("TWITCH_CLIENT_ID")
client_secret <- Sys.getenv("TWITCH_CLIENT_SECRET")
url <- 'https://api.twitch.tv/kraken/clips/'
o <- GET(paste(url,clip_id,sep = ""),config = add_headers('client-id'=client_id, 'Accept'='application/vnd.twitchtv.v5+json')) %>%  content()
if(!is.null(o$error) && o$error=="Unauthorized") stop(o$message)
if(length(o$data)<1) stop("No results for this query parameters.")
o$data %>% transpose() %>% simplify_all()
}
test<-get_clip('GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ')
get_clip <- function(clip_id){
client_id <- Sys.getenv("TWITCH_CLIENT_ID")
client_secret <- Sys.getenv("TWITCH_CLIENT_SECRET")
url <- 'https://api.twitch.tv/kraken/clips/'
o <- GET(paste(url,clip_id,sep = ""),config = add_headers('client-id'=client_id, 'Accept'='application/vnd.twitchtv.v5+json'))
if(!is.null(o$error) && o$error=="Unauthorized") stop(o$message)
if(length(o$data)<1) stop("No results for this query parameters.")
o$data %>% transpose() %>% simplify_all()
}
test<-get_clip('GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ')
pre <- 'https://api.twitch.tv/kraken/clips/'
link <- paste(pre,'GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ',sep = "")
o <- GET(link,config = add_headers('client-id'=client_id, 'Accept'='application/vnd.twitchtv.v5+json'))
View(o)
o[["content"]]
client_id
usethis::edit_r_environ()
o[["all_headers"]][[1]][["headers"]][["content-type"]]
httr::set_config(httr::add_headers('Client-ID' = client_id, 'Accept'='application/vnd.twitchtv.v5+json'))
pre <- 'https://api.twitch.tv/kraken/clips/'
link <- paste(pre,clip_id,sep = "")
clip_id='GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ'
link <- paste(pre,clip_id,sep = "")
o <- GET(link)
View(o)
o <- GET(paste(url,clip_id,sep = ""),config = add_headers('client-id'=client_id, 'Accept'='application/vnd.twitchtv.v5+json')) %>% content()
View(o)
o$data %>% transpose() %>% simplify_all()
View(o)
o[["vod"]][["url"]]
View(o)
o$vod$url
o$vod$id
o$vod$offset
View(o)
o$vod
o$duration
o$duration
o$vod$offset
o$vod$url
o$vod$offset
o$duration
pre <- 'https://api.twitch.tv/kraken/videos/v'
link <- paste(pre,vod_id,sep = "")
o$vod$id
o$vod$id
link <- paste(pre,937203679,sep = "")
v <- GET(link)
View(v)
v <- GET(link) %>% content()
View(v)
float(o$duration)
float::as.float(o$duration)
typeof(o$duration)
endofclipoffset = (o$vod$offset + o$duration)
messages_json = c()
link <- paste(pre,vod_id,'/comments?',sep = "")
vod_id<-o$vod$id
link <- paste(pre,vod_id,'/comments?',sep = "")
link
v <- GET(link) %>% content()
View(v)
endofclipoffset = (o$vod$offset + o$duration)
response = NULL
query = ('cursor=' + response['_next'])
link <- paste(pre,vod_id,'/comments?cursor=content_offset_seconds=',o$vod$offset, sep = "")
chats <- GET(link) %>% content()
View(chats)
devtools::document()
link <- paste(pre_link,vod_id,'/comments?cursor=content_offset_seconds=',o$vod$offset, sep = "")
pre_link <- 'https://api.twitch.tv/v5/videos/'
link <- paste(pre_link,vod_id,'/comments?cursor=content_offset_seconds=',o$vod$offset, sep = "")
link
chats <- GET(link) %>% content()
View(chats)
link <- paste(pre_link,vod_id,'/comments?cursor=content_offset_seconds=',o$vod$offset, sep = "")
chats <- GET(link)
View(chats)
httr::set_config(httr::add_headers('Client-ID' = client_id))# 'Accept'='application/vnd.twitchtv.v5+json'))
link <- paste(pre_link,vod_id,'/comments?cursor=content_offset_seconds=',o$vod$offset, sep = "")
chats <- GET(link)
chats <- GET(link) %>% content()
View(chats)
link <- paste(pre_link,vod_id,'/comments?cursor=content_offset_seconds=',0, sep = "")
chats <- GET(link) %>% content()
View(chats)
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
chats <- GET(link) %>% content()
View(chats)
twitch_auth()
#' Authentication
#' @name Auth
#' @references https://github.com/Freguglia/rTwitchAPI/blob/master/R/authentication.R
#' @export
twitch_auth = function(){
client_id <- Sys.getenv("TWITCH_CLIENT_ID")
client_secret <- Sys.getenv("TWITCH_CLIENT_SECRET")
if (client_id == "" | client_secret == ""){
stop("Please add TWITCH_CLIENT_ID and TWITCH_CLIENT_SECRET to your environment variables (see documentation for reference).")
}
o <- httr::POST("https://id.twitch.tv/oauth2/token",
query = query_list(client_id=client_id,
client_secret = client_secret,
grant_type="client_credentials")) %>% content()
httr::set_config(httr::add_headers('Client-ID' = client_id, Authorization=paste0("Bearer ",o$access_token)))
}
#Creates the query list appropriately.
#' @importFrom stats setNames
query_list <- function(...){
a <- list(...)
as.list(
setNames(
unlist(a), rep(names(a), sapply(a, length))))
}
twitch_auth()
library(pacman)
p_load(ggplot2,dplyr,httr)
twitch_auth()
get_clip <- function(client_id,clip_id){
httr::set_config(httr::add_headers('Client-ID' = client_id, 'Accept'='application/vnd.twitchtv.v5+json'))
pre <- 'https://api.twitch.tv/kraken/clips/'
link <- paste(pre,clip_id,sep = "")
o <- GET(link)
#if(!is.null(o$error) && o$error=="Unauthorized") stop(o$message)
#if(length(o$data)<1) stop("No results for this query parameters.")
o$data %>% transpose() %>% simplify_all()
}
clip_id = 'GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ'
link <- paste(pre,clip_id,sep = "")
pre <- 'https://api.twitch.tv/kraken/clips/'
link <- paste(pre,clip_id,sep = "")
o <- GET(link)
View(o)
o <- GET(link) %>% content()
View(o)
clip_id = 'GracefulIntelligentKathyMikeHogu-uIO9Kd0g_KDqb4mQ'
pre <- 'https://api.twitch.tv/kraken/clips/'
link <- paste(pre,clip_id,sep = "")
o <- GET(link) %>% content()
View(o)
client_id <- Sys.getenv("TWITCH_CLIENT_ID")
httr::set_config(httr::add_headers('Client-ID' = client_id, 'Accept'='application/vnd.twitchtv.v5+json'))
pre <- 'https://api.twitch.tv/kraken/clips/'
link <- paste(pre,clip_id,sep = "")
o <- GET(link) %>% content()
View(o)
o$data %>% transpose() %>% simplify_all()
library(purrr)
o$data %>% transpose() %>% simplify_all()
pre <- 'https://api.twitch.tv/kraken/videos/v'
link <- paste(pre,o$vod$id,sep = "")
vod <- GET(link) %>% content()
View(vod)
o$vod$url
vod_id<-o$vod$id
o$vod$offset # start of clip
endofclipoffset = (o$vod$offset + o$duration)
pre_link <- 'https://api.twitch.tv/v5/videos/'
query = ('cursor=' + response['_next'])
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
chats <- GET(link) %>% content()
View(chats)
chats[["_next"]]
chats = NULL
chats[["_next"]] = NULL
chats <- GET(link) %>% content()
chats
('_next' %in% chats)
('`_next`' %in% chats)
('_next' %in% chats)
chats$comments
chats$comments[1]
chats$comments[[1]]
chats$comments[[1]]$content_offset_seconds
chats$comments[[1]]$content_offset_seconds < endofclipoffset
('_next' %in% chats)
('next' %in% chats)
('_next' %in% chats)
(`_next` %in% chats)
library(stringr)
library(stringi)
str_detect(chats, 'next')
str_detect(chats, '_next')
list(chats)
chats
chats[[1]]
chats[1]
chats[1][1]
chats
str_detect(chats, 'comments')
str_detect(chats, 'comments')
is.null(chats$`_next`)
(`_next` %in% chats[[]])
('_next' %in% chats[[]])
str_ends(chats)
str_ends(chats,'_next')
str_ends(chats$comments,'_next')
chats[2]
chats[2] == '_next'
('_next' %in% chats[2])
chats[2]
any('_next' %in% chats[2])
all('_next' %in% chats[2])
all('_next' %in% chats)
any('_next' %in% chats)
match('_next' %in% chats)
match('_next' %in% as.data.frame(chats))
as.data.frame(chats)
match('_next' %in% chats)
chats[2]
chats[2]$ = '_next'
names(chats[2]) = '_next'
names(chats[2]) == '_next'
paste('content_offset_seconds='(endofclipoffset))}
endofclipoffset
clip_offset<-o$vod$offset # start of clip
paste('content_offset_seconds='(clip_offset))
paste('content_offset_seconds=',clip_offset)}
paste('content_offset_seconds=',clip_offset)
paste('content_offset_seconds=',clip_offset,sep = 0)}
paste('content_offset_seconds=',clip_offset,sep = '')}
range(1,7)
c(0:10)
