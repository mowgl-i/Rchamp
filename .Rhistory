test = list(oien)
test = list('oien')
test = list(['comments'])
test = list('comments')
test = list('comments','_prev','_next')
View(test)
names(test[2])
test = list('comments','_prev':'sten','_next')
View(test)
library(rjson)
chats %>% toJSON()
toJSON(chats)
View(chats)
View(chats)
library(jsonlite)
test = fromJSON(chats) %>%  as.data.frame()
test = fromJSON(chats) %>%  as.data.frame()
fromJSON(chats) %>%  as.data.frame()
fromJSON(txt = chats) %>%  as.data.frame()
View(chats)
test = '{"comments": "{id: 12304987,contentn_offset_seconds:24}", "_prev":"arsotn_","_next":"arstnnn_"}'
test
fromJSON(test)
test_1<-fromJSON(test)
View(test_1)
test = '{"comments": "[{id: 12304987},{contentn_offset_seconds:24}]", "_prev":"arsotn_","_next":"arstnnn_"}'
test_1<-fromJSON(test)
View(test_1)
test = '{"comments": "[[id: 12304987],[contentn_offset_seconds:24]]", "_prev":"arsotn_","_next":"arstnnn_"}'
test_1<-fromJSON(test)
View(chats)
View(test_1)
test = '{"comments": [[["id":"12304987"],["contentn_offset_seconds":"24"]],[["id":"12304987"],["contentn_offset_seconds":"24"]]] , "_prev":"arsotn_","_next":"arstnnn_"}'
test_1<-fromJSON(test)
test = '{"comments": [[["id":"12304987"],
["contentn_offset_seconds":"24"]],
[["id":"12304987"],
["contentn_offset_seconds":"24"]]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
test_1<-fromJSON(test)
test = '{"comments": [[{"id":"12304987"},
["contentn_offset_seconds":"24"]],
[["id":"12304987"],
["contentn_offset_seconds":"24"]]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
test = '{"comments": [[{"id":"12304987"},
{"contentn_offset_seconds":"24"}],
[{"id":"12304987"},
{"contentn_offset_seconds":"24"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
test_1<-fromJSON(test)
View(test_1)
chats = '{"comments": [[{"id":"12304987"},
{"content_offset_seconds":"0.1"}],
[{"id":"12304987"},
{"content_offset_seconds":"0.1"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
chats<-fromJSON(chats)
chats$comments[[1]]$content_offset_seconds
chats$comments[[1]]$content_offset_seconds < 1
chats$comments[[1]]$content_offset_seconds < 0
chats$comments[[1]]$content_offset_seconds
chats = '{"comments": [[{"id":"12304987","content_offset_seconds":"0.1"}],
[{"id":"12304987","content_offset_seconds":"0.1"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
chats<-fromJSON(chats)
View(chats)
chats$comments[[1]]$content_offset_seconds
names(chats[2]) == '_next'
(names(chats[2]) == '_next'| names(chats[3]) == '_next')
chats$`_next`
chats$`_next`
View(chats)
while(is.na(chats) | ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$comments[[1]]$content_offset_seconds < endofclipoffset+1)){ # so long as chat is null or the offset is less than clip offset -> next.
if (!is.na(chats) & (names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$`_next` != 'arstnnn_'){ # can't use [2] because after the first one, [2] is == '_prev'
link =  paste(pre_link,vod_id,'/comments?cursor=',chats$`_next`, sep = "")
}
else{
paste('content_offset_seconds=',clip_offset,sep = '')
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
}
for(i in c(0:10)){ # should instead put/add a sleep or something for the api
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
messages_json = c(messages_json,chats[2], chats$comments[[1]]$content_offset_seconds) # add the codes back
}
}
link
clip_offset
# Chats is just replica json, so that we can reference it in our while/for looops.
chats = '{"comments": [[{"id":"12304987","content_offset_seconds":"0.1"}],
[{"id":"12304987","content_offset_seconds":"0.1"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
chats<-fromJSON(chats)
if (!is.na(chats) & (names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$`_next` != 'arstnnn_'){ # can't use [2] because after the first one, [2] is == '_prev'
print('1')
}
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$`_next` != 'arstnnn_'){ # can't use [2] because after the first one, [2] is == '_prev'
print('1')
}
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & (chats$`_next` != 'arstnnn_')){ # can't use [2] because after the first one, [2] is == '_prev'
print('1')
}
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & (chats$`_next` != 'arstnnn_')){ # can't use [2] because after the first one, [2] is == '_prev'
a = 1
}
else{
print(1)
}
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & (chats$`_next` != 'arstnnn_')){ # can't use [2] because after the first one, [2] is == '_prev'
a = 1
} else{
print(1)
}
if (!is.na(chats) & (names(chats[2]) == '_next'| names(chats[3]) == '_next') & (chats$`_next` != 'arstnnn_')){ # can't use [2] because after the first one, [2] is == '_prev'
a = 1
} else{
print(1)
}
if (!is.na(chats) & ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & (chats$`_next` != 'arstnnn_'))){ # can't use [2] because after the first one, [2] is == '_prev'
a = 1
} else{
print(1)
}
if (!is.na(chats) & ((names(chats[2]) == '_next'| names(chats[3]) == '_next'))){ # can't use [2] because after the first one, [2] is == '_prev'
a = 1
} else{
print(1)
}
if (!is.na(chats) & (names(chats[2]) == '_next'| names(chats[3]) == '_next')){ # can't use [2] because after the first one, [2] is == '_prev'
a = 1
} else{
print(1)
}
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next')){ # can't use [2] because after the first one, [2] is == '_prev'
a = 1
} else{
print(1)
}
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next')){ # can't use [2] because after the first one, [2] is == '_prev'
print(2)
} else{
print(1)
}
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$`_next` != 'arstnnn_'){ # can't use [2] because after the first one, [2] is == '_prev'
print(2)
} else{
print(1)
}
link
pre_link <- 'https://api.twitch.tv/v5/videos/v'
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
link
chats = '{"comments": [[{"id":"12304987","content_offset_seconds":"0.1"}],
[{"id":"12304987","content_offset_seconds":"0.1"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
chats<-fromJSON(chats)
View(messages_json)
endofclipoffset
messages_json[["_prev"]]
messages_json[["_next"]]
messages_json = c()
while(is.na(chats) | ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$comments[[1]]$content_offset_seconds < endofclipoffset+1)){ # so long as chat is null or the offset is less than clip offset -> next.
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$`_next` != 'arstnnn_'){ # can't use [2] because after the first one, [2] is == '_prev'
link =  paste(pre_link,vod_id,'/comments?cursor=',chats$`_next`, sep = "")
}
else{
paste('content_offset_seconds=',clip_offset,sep = '')
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
}
for(i in c(0:10)){ # should instead put/add a sleep or something for the api
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
messages_json = c(messages_json,chats$`_next`, chats$comments[[1]]$content_offset_seconds) # add the codes back
}
}
View(chats)
# Chats is just replica json, so that we can reference it in our while/for looops.
chats = '{"comments": [[{"id":"12304987","content_offset_seconds":"0.1"}],
[{"id":"12304987","content_offset_seconds":"0.1"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
chats<-fromJSON(chats)
link
while(is.na(chats) | ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$comments[[1]]$content_offset_seconds < endofclipoffset+1)){ # so long as chat is null or the offset is less than clip offset -> next.
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$`_next` != 'arstnnn_'){ # can't use [2] because after the first one, [2] is == '_prev'
link =  paste(pre_link,vod_id,'/comments?cursor=',chats$`_next`, sep = "")
}
else{
paste('content_offset_seconds=',clip_offset,sep = '')
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
}
for(i in c(0:10)){ # should instead put/add a sleep or something for the api
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
messages_json = c(messages_json,chats$`_next`, chats$comments[[1]]$content_offset_seconds) # add the codes back
}
}
View(chats)
# Chats is just replica json, so that we can reference it in our while/for looops.
chats = '{"comments": [[{"id":"12304987","content_offset_seconds":"0.1"}],
[{"id":"12304987","content_offset_seconds":"0.1"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
chats<-fromJSON(chats)
link
while(is.na(chats) | ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$comments[[1]]$content_offset_seconds < endofclipoffset+1)){ # so long as chat is null or the offset is less than clip offset -> next.
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$`_next` != 'arstnnn_'){ # can't use [2] because after the first one, [2] is == '_prev'
link =  paste(pre_link,vod_id,'/comments?cursor=',chats$`_next`, sep = "")
}
else{
paste('content_offset_seconds=',clip_offset,sep = '')
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
}
for(i in c(0:10)){ # should instead put/add a sleep or something for the api
print(i)
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
messages_json = c(messages_json,chats$`_next`, chats$comments[[1]]$content_offset_seconds) # add the codes back
}
}
chats = '{"comments": [[{"id":"12304987","content_offset_seconds":"0.1"}],
[{"id":"12304987","content_offset_seconds":"0.1"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
chats<-fromJSON(chats)
chats
while(is.na(chats) | ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$comments[[1]]$content_offset_seconds < endofclipoffset+1)){ # so long as chat is null or the offset is less than clip offset -> next.
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$`_next` != 'arstnnn_'){ # can't use [2] because after the first one, [2] is == '_prev'
link =  paste(pre_link,vod_id,'/comments?cursor=',chats$`_next`, sep = "")
print(link)
}
else{
paste('content_offset_seconds=',clip_offset,sep = '')
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
print(link)
}
for(i in c(0:10)){ # should instead put/add a sleep or something for the api
print(i)
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
messages_json = c(messages_json,chats$`_next`, chats$comments[[1]]$content_offset_seconds)
print(chats$`_next`) # add the codes back
}
}
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
View(chats)
# Chats is just replica json, so that we can reference it in our while/for looops.
chats = '{"comments": [[{"id":"12304987","content_offset_seconds":"0.1"}],
[{"id":"12304987","content_offset_seconds":"0.1"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
print(link)
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
View(chats)
httr::set_config(httr::add_headers('Client-ID' = client_id))
# Chats is just replica json, so that we can reference it in our while/for looops.
chats = '{"comments": [[{"id":"12304987","content_offset_seconds":"0.1"}],
[{"id":"12304987","content_offset_seconds":"0.1"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
chats<-fromJSON(chats)
link
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
View(chats)
link
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
link
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
View(chats)
link <- paste(pre_link,vod_id,'/comments?cursor=0', sep = "")
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
View(chats)
View(chats)
messages_json = c(messages_json,chats$`_next`, chats$comments[[1]]$content_offset_seconds)
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
link
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
chats <- GET(link) %>% content()
chats
twitch_auth()
httr::set_config(httr::add_headers('Client-ID' = client_id, 'Accept'='application/vnd.twitchtv.v5+json')
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
httr::set_config(httr::add_headers('Client-ID' = client_id, 'Accept'='application/vnd.twitchtv.v5+json'))
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
View(chats)
View(chats)
link
View(chats)
chats <- GET(link)
View(chats)
httr::set_config(httr::add_headers('Client-ID' = client_id, 'Accept'='application/vnd.twitchtv.v5+json'))
pre <- 'https://api.twitch.tv/kraken/clips/'
link <- paste(pre,clip_id,sep = "")
o <- GET(link) %>% content()
View(o)
httr::set_config(httr::add_headers('Client-ID' = client_id))# 'Accept'='application/vnd.twitchtv.v5+json'))
pre <- 'https://api.twitch.tv/kraken/videos/v'
link <- paste(pre,o$vod$id,sep = "")
vod <- GET(link) %>% content()
View(vod)
View(vod)
vod <- GET(link)
View(vod)
clip_offset<-o$vod$offset # start of clip
endofclipoffset = (o$vod$offset + o$duration)
messages_json = c()
pre_link <- 'https://api.twitch.tv/v5/videos/'
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
link
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"})
View(chats)
pre_link <- 'https://api.twitch.tv/v5/videos/'
chats = '{"comments": [[{"id":"12304987","content_offset_seconds":"0.1"}],
[{"id":"12304987","content_offset_seconds":"0.1"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
chats<-fromJSON(chats)
while(is.na(chats) | (names(chats[2]) == '_next'& chats$comments[[1]]$content_offset_seconds < endofclipoffset+1)){ # so long as chat is null or the offset is less than clip offset -> next.
if (!is.na(chats) & names(chats[2]) == '_next'){ # can't use [2] because after the first one, [2] is == '_prev'
link =  paste(pre_link,vod_id,'/comments?cursor=',chats$`_next`, sep = "")
}
else{
paste('content_offset_seconds=',clip_offset,sep = '')
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
}
for(i in c(0:10)){
chats<-tryCatch({chats <- GET(link) %>% content()},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"})
messages_json = c(messages_json,chats[2])
}
}
View(chats)
chats = '{"comments": [[{"id":"12304987","content_offset_seconds":"0.1"}],
[{"id":"12304987","content_offset_seconds":"0.1"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
chats<-fromJSON(chats)
link
while(is.na(chats) | ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$comments[[1]]$content_offset_seconds < endofclipoffset+1)){ # so long as chat is null or the offset is less than clip offset -> next.
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$`_next` != 'arstnnn_'){ # can't use [2] because after the first one, [2] is == '_prev'
link =  paste(pre_link,vod_id,'/comments?cursor=',chats$`_next`, sep = "")
print(link)
}
else{
paste('content_offset_seconds=',clip_offset,sep = '')
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
print(link)
}
for(i in c(0:10)){ # should instead put/add a sleep or something for the api
print(i)
chats<-tryCatch({chats <- GET(link)},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
messages_json = c(messages_json,chats$`_next`, chats$comments[[1]]$content_offset_seconds)
print(chats$`_next`) # add the codes back
}
}
#!is.na(chats) taken out
while(((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$comments[[1]]$content_offset_seconds < endofclipoffset+1)){ # so long as chat is null or the offset is less than clip offset -> next.
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$`_next` != 'arstnnn_'){ # can't use [2] because after the first one, [2] is == '_prev'
link =  paste(pre_link,vod_id,'/comments?cursor=',chats$`_next`, sep = "")
print(link)
}
else{
paste('content_offset_seconds=',clip_offset,sep = '')
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
print(link)
}
for(i in c(0:10)){ # should instead put/add a sleep or something for the api
print(i)
chats<-tryCatch({chats <- GET(link)},
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
messages_json = c(messages_json,chats$`_next`, chats$comments[[1]]$content_offset_seconds)
print(chats$`_next`) # add the codes back
}
}
View(chats)
# Chats is just replica json, so that we can reference it in our while/for looops.
chats = '{"comments": [[{"id":"12304987","content_offset_seconds":"0.1"}],
[{"id":"12304987","content_offset_seconds":"0.1"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
chats<-fromJSON(chats)
#!is.na(chats) taken out
while(((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$comments[[1]]$content_offset_seconds < endofclipoffset+1)){ # so long as chat is null or the offset is less than clip offset -> next.
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$`_next` != 'arstnnn_'){ # can't use [2] because after the first one, [2] is == '_prev'
link =  paste(pre_link,vod_id,'/comments?cursor=',chats$`_next`, sep = "")
print(link)
}
else{
paste('content_offset_seconds=',clip_offset,sep = '')
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
print(link)
}
for(i in c(0:10)){ # should instead put/add a sleep or something for the api
print(i)
chats<-tryCatch({chats <- GET(link) %>% content() },
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
messages_json = c(messages_json,chats$`_next`, chats$comments[[1]]$content_offset_seconds)
print(chats$`_next`) # add the codes back
}
}
chats<-tryCatch({chats <- GET(link) %>% content() },
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
View(chats)
length(chats$comments)
chats$comments[[1]]$content_offset_seconds)
chats$comments[[1]]$content_offset_seconds
chats$comments[[total_comments-1]]$content_offset_seconds
total_comments = length(chats$comments)
chats$comments[[total_comments-1]]$content_offset_seconds
chats$comments[[total_comments]]$content_offset_seconds
vod$content
pre <- 'https://api.twitch.tv/kraken/videos/v'
link <- paste(pre,vod_id,sep = "")
vod <- GET(link) %>% content()
View(vod)
offset
clip_offset
clip_offset/vod$length
vod_len = vod$length
clip_offset - vod$length
for(comments in chats$comments){
print(comments$message$body)
}
endofclipoffset
messages_json = c()
authors = c()
attemps = 6
attemp_sleep = 10
i < attemps
pre_link <- 'https://api.twitch.tv/v5/videos/'
# Chats is just replica json, so that we can reference it in our while/for looops.
chats = '{"comments": [[{"id":"12304987","content_offset_seconds":"0.1"}],
[{"id":"12304987","content_offset_seconds":"0.1"}]] ,
"_prev":"arsotn_",
"_next":"arstnnn_"}'
chats<-fromJSON(chats)
link
prelink
pre_link
pre_link, vod_id
vod_id
while(((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$comments[[1]]$content_offset_seconds < endofclipoffset+1)){ # so long as chat is null or the offset is less than clip offset -> next.
if ((names(chats[2]) == '_next'| names(chats[3]) == '_next') & chats$`_next` != 'arstnnn_'){ # can't use [2] because after the first one, [2] is == '_prev'
link =  paste(pre_link,vod_id,'/comments?cursor=',chats$`_next`, sep = "")
}
else{
paste('content_offset_seconds=',clip_offset,sep = '')
link <- paste(pre_link,vod_id,'/comments?cursor=', sep = "")
}
for(i in c(0:10)){ # should instead put/add a sleep or something for the api
print(i)
chats<-tryCatch({chats <- GET(link) %>% content() },
warning = function(w){is_clip_alb <- "video missing"},
error = function(e){is_clip_alb <-"video missing"}) # try and run this request
messages_json = c(messages_json,chats$`_next`, chats$comments[[1]]$content_offset_seconds)
total_comments = length(chats$comments)
chat_offset = chats$comments[[total_comments]]$content_offset_seconds
progress =  (chat_offset/vod_len)*100
if (progress >= 100){
for(comment in chats$comments){
if(comment$content_offset_seconds >= clip_offset & comment$content_offset_seconds <= endofclipoffset)
messages <- append(messages, comment$message$body)
author <- append(author, comment$commenter$display_name)
} else{print('somn broke inside the nested if and for')}
break
else
print('idek homie')
if(i < attemps-1){
print('let me sleep..')
Sys.sleep(attemp_sleep)
}
}
# this is happening 10x before getting the next link :( try again) break statement needed?
}
}
